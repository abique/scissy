package scissy.pb;

message Void
{
}

enum Status
{
  kSucceed           = 0;
  kFailed            = 1;
  kInvalidSession    = 2;
  kNotImplemented    = 3;
  kInsufficientRight = 4;
  kNotFound          = 5;
  kInternalError     = 6;
}

message StatusMsg
{
  required Status status = 1;
  optional string msg    = 2;
}

message ServiceInfo
{
  required bytes  clone_user = 1;
  required bytes  clone_host = 2;
  required bytes  version    = 3;
  required uint64 start_time = 4;
}

enum Role
{
  kNone   = 0;
  kReader = 1;
  kWriter = 2;
  kOwner  = 3;
}

enum SshKeyType
{
  kSshKeyRsa = 0;
  kSshKeyDsa = 1;
}

message UserAuth
{
  required bytes user     = 1;
  required bytes password = 2;
}

message Session
{
  required bytes  user    = 1;
  optional int64  user_id = 2;
  optional bytes  email   = 3;
  optional Status status  = 4;
  optional string msg     = 5;
  optional Role   role    = 6;
}

message UserCreate
{
  required bytes user     = 1;
  required bytes password = 2;
  required bytes email    = 3;
}

message UserDelete
{
  required bytes user = 1;
}

message SshKey
{
  required SshKeyType type   = 1;
  required bytes      key    = 2;
  optional string     desc   = 3;
  optional uint64     key_id = 4;
}

message UserSshKey
{
  required SshKey        key  = 1;
}

message UserSshKeySelector
{
  required bytes         user = 3; // target
}

message UserSshKeys
{
  repeated SshKey keys   = 1;
  optional Status status = 2;
  optional string msg    = 3;
}

message GroupCreate
{
  optional bytes grp          = 2;
  required bytes desc         = 3;
}

message GroupDelete
{
  optional int64         grp_id = 2;
  optional bytes         grp    = 3;
}

message GroupAddUser
{
  optional bytes grp          = 2;
  optional int64 grp_id       = 3;
  optional bytes user         = 4;
  optional int64 user_id      = 5;
  required Role  role         = 6;
}

message GroupRemoveUser
{
  optional bytes grp          = 2;
  optional int64 grp_id       = 3;
  optional bytes user         = 4;
  optional int64 user_id      = 5;
}

message GroupSelector
{
  optional bytes  grp    = 1; // the name of the group
  optional bytes  user   = 2; // the group which contains this user
  optional uint32 limit  = 3;
  optional uint32 offset = 4;
  optional int64  grp_id = 5;
}

message GroupMemberSelector
{
  optional bytes  grp     = 1;
  optional int64  grp_id  = 2;
  optional bytes  user    = 3;
  optional int64  user_id = 4;
  optional Role   role    = 5;
  optional uint32 limit   = 6;
  optional uint32 offset  = 7;
}

message GroupInfo
{
  optional bytes  grp    = 1;
  optional uint32 size   = 2;
  optional int64  grp_id = 3;
  optional string desc   = 4;
  optional Status status = 5;
  optional string msg    = 6;
}

message GroupList
{
  repeated GroupInfo grps   = 1;
  optional Status    status = 2;
  optional string    msg    = 3;
}

message Member
{
  optional Status status  = 1;
  optional bytes  user    = 2;
  optional int64  user_id = 3;
  required Role   role    = 4;
  optional bytes  grp     = 5;
  optional int64  grp_id  = 6;
}

message MemberList
{
  optional Status status = 1;
  optional string msg    = 2;
  repeated Member groups = 3;
  repeated Member users  = 4;
}

message RepoCreate
{
  required bytes         name      = 2;
  required bytes         desc      = 3;
  required bool          is_public = 4;
}

message RepoUpdate
{
  optional int64         repo_id   = 2;
  required bytes         repo      = 3;
  required bytes         name      = 4;
  required bytes         desc      = 5;
  required bool          is_public = 6;
}

message RepoDelete
{
  optional int64         repo_id = 2;
  optional bytes         repo    = 3;
}

message RepoAddUser
{
  optional int64         repo_id = 2;
  optional bytes         repo    = 3;
  optional int64         user_id = 4;
  optional bytes         user    = 5;
  required Role          role    = 6;
}

message RepoRemoveUser
{
  optional int64         repo_id = 2;
  optional bytes         repo    = 3;
  optional int64         user_id = 4;
  optional bytes         user    = 5;
}

message RepoAddGroup
{
  optional int64         repo_id = 2;
  optional bytes         repo    = 3;
  optional int64         grp_id  = 4;
  optional bytes         grp     = 5;
  required Role          role    = 6;
}

message RepoRemoveGroup
{
  optional int64         repo_id = 2;
  optional bytes         repo    = 3;
  optional int64         grp_id  = 4;
  optional bytes         grp     = 5;
}

message RepoName
{
  required bytes name = 1;
}

message RepoInfo
{
  required Status status = 1;
  optional string msg    = 2;

  required int64  id               = 3;
  required bytes  name             = 4;
  required bytes  desc             = 5;
  required bool   is_public        = 6;
  optional uint64 last_commit_time = 7;
}

message RepoMembers
{
  required Status status = 1;
  optional string msg    = 2;

  repeated int64  users_id  = 3;
  repeated bytes  users     = 4;
  repeated int64  groups_id = 5;
  repeated bytes  groups    = 6;
}

message RepoList
{
  repeated RepoInfo repos            = 1;
  optional Status   status           = 2;
  optional string   msg              = 3;
}

message RepoSelector
{
  optional uint32        limit     = 1;
  optional uint32        offset    = 2;
  optional int64         repo_id   = 3;
  optional bytes         repo      = 4;
  optional bytes         commit_id = 6;
}

message CommitSelector
{
  required bytes         revision = 2;
  optional int64         repo_id  = 3;
  optional bytes         repo     = 4;
}

message LogSelector
{
  optional bytes         revision = 2;
  optional int64         repo_id  = 3;
  optional bytes         repo     = 4;
  optional uint32        limit    = 5;
  optional uint32        offset   = 6;
}

message TreeSelector
{
  optional bytes         revision  = 2;
  optional int64         repo_id   = 3;
  optional bytes         repo      = 4;
  optional bytes         directory = 5;
}

message BlobSelector
{
  optional bytes         revision  = 2;
  optional int64         repo_id   = 3;
  optional bytes         repo      = 4;
  optional bytes         path      = 5;
}

message DiffSelector
{
  optional int64         repo_id      = 2;
  optional bytes         repo         = 3;
  optional bytes         revision_old = 4;
  optional bytes         revision_new = 5;
  optional bytes         path         = 6;
}

message AccessUserRepo
{
  required int64 repo_id   = 1;
  required int64 user_id   = 2;
}

message ShellControl
{
  required int64 user_id   = 1;
  required bytes repo_name = 2;
}

message ShellStatus
{
  required Status status    = 1;
  optional bytes  repo_path = 2;
  optional Role   role      = 3;
  optional bool   is_public = 4;
}

enum GitFileMode
{
  kGitFilemodeNew            = 0000000;
  kGitFilemodeTree           = 0040000;
  kGitFilemodeBlob           = 0100644;
  kGitFilemodeBlobExecutable = 0100755;
  kGitFilemodeLink           = 0120000;
  kGitFilemodeCommit         = 0160000;
}

enum GitOtype
{
  kGitObjAny      = -2;
  kGitObjBad      = -1;
  kGitObjCommit   = 1;
  kGitObjTree     = 2;
  kGitObjBlob     = 3;
  kGitObjTag      = 4;
  kGitObjOfsDelta = 6;
  kGitObjRefDelta = 7;
}

message GitBranch
{
  required bytes name = 1;
}

message GitBranches
{
  optional Status    status   = 1;
  optional bytes     msg      = 2;
  repeated GitBranch branches = 3;
}

message GitSignature
{
  optional bytes  name        = 1;
  optional bytes  email       = 2;
  optional uint64 time        = 3;
}

message GitCommit
{
  optional Status       status      = 1;
  optional bytes        id          = 2;
  repeated bytes        parents_id  = 3;
  optional bytes        msg         = 4;
  optional uint64       time        = 5;
  optional GitSignature commiter    = 6;
  optional GitSignature author      = 7;
  optional bytes        tree_id     = 8;
}

message GitLog
{
  optional Status    status  = 1;
  optional bytes     msg     = 2;
  repeated GitCommit commits = 3;
}

message GitTreeEntry
{
  required bytes       name = 1;
  required bytes       id   = 2;
  required GitOtype    type = 3;
  required GitFileMode mode = 4;
}

message GitTree
{
  optional Status status        = 1;
  optional bytes  msg           = 2;
  repeated GitTreeEntry entries = 3;
}

message GitBlob
{
  optional Status status       = 1;
  optional bytes  msg          = 2;
  required bool   is_binary    = 3;
  optional bytes  data         = 4;
  optional bytes  content_type = 5;
}

message GitPatch
{
  optional Status status = 1;
  optional bytes  msg    = 2;
  optional bytes  data   = 3;
}

service Service
{
  /* service */
  rpc serviceInfo(Void) returns (ServiceInfo);

  /* session */
  rpc userAuth(UserAuth) returns (Session);
  rpc userGetSession(Void) returns (Session);

  /* user management */
  rpc userCreate(UserCreate) returns (StatusMsg);
  // rpc userDelete(UserDelete) returns (StatusMsg);
  rpc userAddSshKey(UserSshKey) returns (StatusMsg);
  rpc userRemoveSshKey(UserSshKey) returns (StatusMsg);
  rpc userGetSshKeys(UserSshKeySelector) returns (UserSshKeys);

  /* group management */
  rpc groupCreate(GroupCreate) returns (GroupInfo);
  rpc groupDelete(GroupDelete) returns (StatusMsg);
  rpc groupAddUser(GroupAddUser) returns (StatusMsg);
  rpc groupRemoveUser(GroupRemoveUser) returns (StatusMsg);

  /* groups view */
  rpc groupGetInfo(GroupSelector) returns (GroupInfo);
  rpc groupsList(GroupSelector) returns (GroupList);
  rpc groupListMembers(GroupMemberSelector) returns (MemberList);

  /* repo management */
  rpc repoCreate(RepoCreate) returns (RepoInfo);
  rpc repoUpdate(RepoUpdate) returns (StatusMsg);
  rpc repoDelete(RepoDelete) returns (StatusMsg);
  rpc repoAddUser(RepoAddUser) returns (StatusMsg);
  rpc repoRemoveUser(RepoRemoveUser) returns (StatusMsg);
  rpc repoAddGroup(RepoAddGroup) returns (StatusMsg);
  rpc repoRemoveGroup(RepoRemoveGroup) returns (StatusMsg);

  /* repo view */
  rpc reposList(RepoSelector) returns (RepoList);
  rpc repoGetInfo(RepoSelector) returns (RepoInfo);
  rpc repoListMembers(RepoSelector) returns (MemberList);
  rpc repoListBranches(RepoSelector) returns (GitBranches);
  rpc repoGetCommit(CommitSelector) returns (GitCommit);
  rpc repoGetLog(LogSelector) returns (GitLog);
  rpc repoGetTree(TreeSelector) returns (GitTree);
  rpc repoGetBlob(BlobSelector) returns (GitBlob);
  rpc repoGetPatch(DiffSelector) returns (GitPatch);

  /* ssh shell */
  rpc shellControl(ShellControl) returns (ShellStatus);
}
