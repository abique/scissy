package scissy.pb;

message Void
{
}

enum Status
{
  kSucceed        = 0;
  kFailed         = 1;
  kInvalidSession = 2;
}

message StatusMsg
{
  required Status status = 1;
  optional string msg    = 2;
}

enum Role
{
  kNone   = 0;
  kReader = 1;
  kWriter = 2;
  kOwner  = 3;
}

enum SshKeyType
{
  kSshKeyRsa = 0;
  kSshKeyDsa = 1;
}

message UserAuth
{
  required bytes user     = 1;
  required bytes password = 2;
}

message UserAuthToken
{
  required bytes user  = 1;
  required bytes token = 2;
}

message Session
{
  required bytes  user    = 1;
  required bytes  token   = 2;
  optional bytes  email   = 3;
  optional Status status  = 4;
  optional string msg     = 5;
  optional Role   role    = 6;
  optional uint64 user_id = 7;
}

message UserCreate
{
  required bytes user     = 1;
  required bytes password = 2;
  required bytes email    = 3;
}

message UserDelete
{
  required bytes user = 1;
}

message SshKey
{
  required SshKeyType type   = 1;
  required bytes      key    = 2;
  optional string     desc   = 3;
  optional uint64     key_id = 4;
}

message UserSshKey
{
  required SshKey        key  = 1;
  required UserAuthToken auth = 2;
}

message UserSshKeySelector
{
  required UserAuthToken auth = 2; // if you're admin, you can view others keys
  required bytes         user = 3; // target
}

message UserSshKeys
{
  repeated SshKey keys   = 1;
  optional Status status = 2;
  optional string msg    = 3;
}

message GroupCreate
{
  required UserAuthToken auth = 1;
  required bytes grp          = 2;
  required bytes desc         = 3;
}

message GroupDelete
{
  required UserAuthToken auth = 1;
  required bytes grp          = 2;
}

message GroupAddUser
{
  required UserAuthToken auth = 1;
  required bytes grp          = 2;
  required bytes user         = 3;
  required Role  role         = 4;
}

message GroupRemoveUser
{
  required UserAuthToken auth = 1;
  required bytes grp          = 2;
  required bytes user         = 3;
}

message GroupSelector
{
  optional bytes  grp    = 1; // the name of the group
  optional bytes  user   = 2; // the group which contains this user
  optional uint32 limit  = 3;
  optional uint32 offset = 4;
  optional uint64 grp_id = 5;
}

message GroupUserSelector
{
  optional bytes  grp    = 1;
  optional bytes  user   = 2;
  optional Role   role   = 3;
  optional uint32 limit  = 4;
  optional uint32 offset = 5;
  optional uint64 grp_id = 6;
}

message GroupInfo
{
  optional bytes  grp    = 1;
  optional uint32 size   = 2;
  optional uint32 grp_id = 3;
  optional string desc   = 4;
  optional Status status = 5;
  optional string msg    = 6;
}

message GroupList
{
  repeated GroupInfo grps   = 1;
  optional Status    status = 2;
  optional string    msg    = 3;
}

message UserRole
{
  required bytes  user    = 1;
  required uint64 user_id = 2;
  required Role   role    = 3;
}

message GroupUserList
{
  repeated UserRole users  = 1;
  optional Status   status = 2;
  optional string   msg    = 3;
}

message RepoCreate
{
  required bytes repo = 1;
}

message RepoDelete
{
  required bytes repo = 1;
}

message RepoAddUser
{
  required bytes repo = 1;
  required bytes user = 2;
  required Role  role = 3;
}

message RepoAddGroup
{
  required bytes repo = 1;
  required bytes grp  = 2;
  required Role  role = 3;
}

message RepoInfo
{
  required bytes repo = 1;
}

message RepoList
{
  repeated RepoInfo repos = 1;
}

message RepoSelector
{
  optional bytes  repo   = 1;
  optional bytes  user   = 2;
  optional bytes  grp    = 3;
  optional uint32 limit  = 4;
  optional uint32 offset = 5;
}

message RepoPath
{
  optional bytes path = 1;
}

service Service
{
  /* session */
  rpc userAuth(UserAuth) returns (Session);
  rpc userCheckAuthToken(UserAuthToken) returns (Session);
  rpc userRevokeAuthToken(UserAuthToken) returns (StatusMsg);

  /* user management */
  rpc userCreate(UserCreate) returns (StatusMsg);
  // rpc userDelete(UserDelete) returns (StatusMsg);
  rpc userAddSshKey(UserSshKey) returns (StatusMsg);
  rpc userRemoveSshKey(UserSshKey) returns (StatusMsg);
  rpc userGetSshKeys(UserSshKeySelector) returns (UserSshKeys);

  /* group management */
  rpc groupCreate(GroupCreate) returns (GroupInfo);
  rpc groupDelete(GroupDelete) returns (StatusMsg);
  rpc groupAddUser(GroupAddUser) returns (StatusMsg);
  rpc groupRemoveUser(GroupRemoveUser) returns (StatusMsg);

  /* groups view */
  rpc groupGetInfo(GroupSelector) returns (GroupInfo);
  rpc groupsList(GroupSelector) returns (GroupList);
  rpc groupUserList(GroupUserSelector) returns (GroupUserList);

  // /* repo management */
  // rpc repoCreate(RepoCreate) returns (StatusMsg);
  // rpc repoDelete(RepoDelete) returns (StatusMsg);
  // rpc repoAddUser(RepoAddUser) returns (StatusMsg);
  // rpc repoAddGroup(RepoAddGroup) returns (StatusMsg);

  // /* repo view */
  // rpc repoGetUserRole(RepoSelector) returns (UserRole);
  // rpc repoGetPath(RepoSelector) returns (RepoPath);
  // rpc reposGetInfo(RepoSelector) returns (RepoInfo);
  // rpc reposList(RepoSelector) returns (RepoList);
  // rpc repoGetCommitLog() returns ();
  // rpc repoGetCommit() returns ();
  // rpc repoGetTree() returns ();
}
