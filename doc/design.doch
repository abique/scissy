/**

@mainpage Bluegitf's goals and design

@section goals Goals

- provide a git repository hosting service
- have a web interface to:
 - create/update/delete a user account
 - create/update/delete a group
 - create/delete a repository
 - browse a repository:
  - history
  - branches/tags
  - tree
  - download a tarball of a revision
 - manage a repository's ACL
 - list repositories
 - list users
 - list groups
- have a very simple setup
 - no apache, nginx or any external web server to configure
 - no mysql, postgresql, or any database to configure
 - no complicated configuration options, you can enjoy the default settings
 - you should be able to setup your server from scratch in a few minutes
- security
 - code is written with robustness and security in mind
 - bluegitf comes with default profiles for apparmor

@section non_goals Non goals

- have a distributed, scalable, complex architecture
 - bluegitf is not designed to host thousand of repositories, every companies
 should be able to host its own bluegitf server, and I think that one server
 should be enough to host a company's repositories. And if not, they could
 be able to regroup projects on separated machines. Also, vertical scaling is
 an option, as bluegitf takes advantage of hard drive and multi-cores.
- be social like github: even if it's cool, github does it very well. Maybe I'll
 add "I like" or "+1", but at the cost of privacy for the visitor. So I may
 never do it as well.

@section component Components

- bluegitf-init, initialize a new bluegitf-environment
- bluegitf, web server, acl server (used by bluegitf-shell)
- bluegitf-shell, ensure ACL between ssh and git-shell

@dotfile doc/design.dot

@section filesystem_layout Filesystem layout

- ~/db/bluegitf.sqlite   stores the database
- ~/.ssh/authorized_keys stores the ssh authorized_keys
- ~/repos/${name}        stores the bare git repository
- ~/conf                 stores the config files
- ~/conf/key.pem         the web server key
- ~/conf/cert.pem        the web server certificate

@section database_model Database model

@dotfile sql/model.dot

*/
